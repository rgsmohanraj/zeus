/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
description = 'ZEUS LMS'

apply plugin: 'org.zeroturnaround.gradle.jrebel'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'io.swagger.core.v3.swagger-gradle-plugin'
apply plugin: 'com.google.cloud.tools.jib'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply from: "$rootDir/artifactory.gradle"


jar {
    archivesBaseName = 'zeus'
}



compileJava.doLast {
    def mainSS = sourceSets.main
    def source = mainSS.java.classesDirectory.get()
    copy {
        from file("src/main/resources/jpa/persistence.xml")
        into "${source}/META-INF/"
    }
    javaexec {
        description = 'Performs EclipseLink static weaving of entity classes'
        def target = source
        main 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
        args '-persistenceinfo', source, '-classpath', configurations.runtimeClasspath, source, target
        classpath configurations.runtimeClasspath
    }
    delete {
        delete "${source}/META-INF/persistence.xml"
    }
}

// Configuration for Swagger documentation generation task
// https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-gradle-plugin
import org.apache.tools.ant.filters.ReplaceTokens

task prepareInputYaml {
    outputs.file("${buildDir}/tmp/swagger/lms-input.yaml")

    doLast {
        copy {
            from file("${projectDir}/config/swagger/lms-input.yaml.template")
            into file("${buildDir}/tmp/swagger")
            rename { String filename -> return 'lms-input.yaml' }
            filter(ReplaceTokens, tokens: [VERSION: "${project.version}".toString()])
        }
    }
}

tasks.resolve {
    logging.captureStandardOutput LogLevel.ERROR
    outputFileName = 'lms'
    outputFormat = 'JSONANDYAML'
    prettyPrint = false
    classpath = sourceSets.main.runtimeClasspath
    buildClasspath = classpath
    outputDir = file("${buildDir}/classes/java/main/static")
    openApiFile = file("${buildDir}/tmp/swagger/lms-input.yaml")
    dependsOn(prepareInputYaml)
}

configurations { configureEach(){
    exclude group: 'io.swagger.core.v3', module: 'swagger-jaxrs2'
    exclude group: 'com.github.jnr', module: 'jnr-posix'
}
    providedRuntime // needed for Spring Boot executable WAR
    providedCompile
    compile() {
        exclude module: 'hibernate-entitymanager'
        exclude module: 'hibernate-validator'
        exclude module: 'activation'
        exclude module: 'bcmail-jdk14'
        exclude module: 'bcprov-jdk14'
        exclude module: 'bctsp-jdk14'
        exclude module: 'c3p0'
        exclude module: 'stax-api'
        exclude module: 'jaxb-api'
        exclude module: 'jaxb-impl'
        exclude module: 'jboss-logging'
        exclude module: 'itext-rtf'
        exclude module: 'classworlds'
    }
    runtime
}

apply from: 'dependencies.gradle'


// If we are running Gradle within Eclipse to enhance classes with OpenJPA,
// set the classes directory to point to Eclipse's default build directory
if (project.hasProperty('env') && project.getProperty('env') == 'eclipse')
{
    sourceSets.main.java.outputDir = new File(rootProject.projectDir, "core-provider/bin/main")
}

eclipse
{
    project {
        buildCommand([ LaunchConfigHandle: "<project>/.externalToolBuilders/OpenJPA Enhance Builder.launch" ],  'org.eclipse.ui.externaltools.ExternalToolBuilder')
    }
}

/* http://stackoverflow.com/questions/19653311/jpa-repository-works-in-idea-and-production-but-not-in-gradle */
sourceSets.main.output.resourcesDir = sourceSets.main.java.classesDirectory
sourceSets.test.output.resourcesDir = sourceSets.test.java.classesDirectory

if (!(project.hasProperty('env') && project.getProperty('env') == 'dev')) {
    sourceSets {
        test {
            java {
                exclude '**/core/boot/tests/**'
            }
        }
    }
}

// Configuration for SQL tasks
// https://docs.groovy-lang.org/latest/html/api/groovy/sql/Sql.html
import groovy.sql.Sql

import java.sql.SQLException

project.ext.mysqlUser='root'
project.ext.mysqlPassword='mysql'
project.ext.pgUser='root'
project.ext.pgPassword='postgres'

configurations {
    driver
}
dependencies {
    driver 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
//    driver 'org.postgresql:postgresql:42.7.2'
    driver 'com.mysql:mysql-connector-j:8.2.0'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
    loader.addURL(file.toURL())
}

task createDB {
    description= "Creates the MariaDB Database. Needs database name to be passed (like: -PdbName=someDBname)"
    doLast {
        try {
            if(project.hasProperty("dev")) {
                    println "Creating Development DB Environment"
                    def sql = Sql.newInstance( 'jdbc:mariadb://10.100.10.29:3306/', 'vcpl_mariadb', '$dZqBq5n9fyL0U44', 'org.mariadb.jdbc.Driver' )
                    sql.execute( 'create database zeus_tenants' )
                    sql.execute( 'create database zeus_colending' )
            } else if(project.hasProperty("qa")) {
                println "Creating QA DB Environment";
                def sql = Sql.newInstance( 'jdbc:mariadb://10.100.10.158:3306/', 'vcpl_mariadb', '$dZqBq5n9fyL0U44', 'org.mariadb.jdbc.Driver' )
                sql.execute( 'create database zeus_tenants' )
                sql.execute( 'create database zeus_colending' )
                // sql.execute('USE `lms_tenants`')
                // sql.execute('UPDATE lms_tenants.tenants SET schema_server = \'10.100.10.158\', schema_server_port = \'3306\', schema_username = \'vcpl_mariadb\', schema_password = \'$dZqBq5n9fyL0U44\' WHERE id=1;')
            } else if(project.hasProperty("uat")) {
                println "Creating UAT DB Environment"
                def sql = Sql.newInstance( 'jdbc:mariadb://10.100.20.86:3571/', 'vcpl_zeusdb', 'RdwWog9iU2Ej##ksB8', 'org.mariadb.jdbc.Driver' )
                sql.execute( 'create database zeus_tenants' )
                sql.execute( 'create database zeus_colending' )
            } else if(project.hasProperty("prod")) {
                println "Creating Production DB Environment"
            } else {
                println "Creating Local DB Environment"
                def sql = Sql.newInstance( 'jdbc:mariadb://localhost:3306/', mysqlUser, mysqlPassword, 'org.mariadb.jdbc.Driver' )
                sql.execute( 'create database zeus_tenants' )
                sql.execute( 'create database zeus_colending' )
            }
        } catch (Exception e) {
            if (e.getMessage().contains("database exists")) {
                println "Skipping Database Schema 'lms_tenants' Creation"
                println "Skipping Database Schema 'lms_default' Creation"
            } else {
                println "Failed :" + e.getMessage();
            }
        }
    }
}

task createMySQLDB {
    description= "Creates the MySQL Database. Needs database name to be passed (like: -PdbName=someDBname)"
    doLast {
        def sql = Sql.newInstance( 'jdbc:mysql://localhost:3306/', mysqlUser, mysqlPassword, 'com.mysql.cj.jdbc.Driver' )
        sql.execute( 'create database '+"`$dbName`" )
    }
}

task dropMySQLDB {
    description= "Drops the specified MySQL database. The database name has to be passed (like: -PdbName=someDBname)"
    doLast {
        def sql = Sql.newInstance( 'jdbc:mysql://localhost:3306/', mysqlUser, mysqlPassword, 'com.mysql.cj.jdbc.Driver' )
        sql.execute( 'DROP DATABASE '+"`$dbName`")
    }
}

task setBlankPassword {
    doLast {
        def sql = Sql.newInstance( 'jdbc:mariadb://localhost:3306/', mysqlUser, mysqlPassword, 'org.mariadb.jdbc.Driver' )
        sql.execute('USE `lms_tenants`')
        sql.execute("UPDATE lms_tenants.tenant_server_connections SET schema_server = 'localhost', schema_server_port = 4306, schema_username = 'root', schema_password = 'mysql' WHERE id=1;")
    }
}

bootRun {
    jvmArgs = [
        "-Dspring.output.ansi.enabled=ALWAYS"
    ]

    dependencies {
        implementation ('org.mariadb.jdbc:mariadb-java-client:3.3.3')
    }

    dependsOn(resolve)
}

springBoot {
    mainClass = 'org.vcpl.lms.ServerApplication'
}

bootJar {
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    manifest {
//        attributes('Main-Class': 'org.springframework.boot.loader.PropertiesLauncher', 'Implementation-Title': 'Zeus LMS', 'Implementation-Version': project.version)
//    }
//    classifier = ''
    dependsOn(resolve)
}


// NOTE: Gradle suggested these dependencies
jar.dependsOn resolve
resolveMainClassName.dependsOn resolve
//bootJarMainClassName.dependsOn resolve
sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18
