--liquibase formatted sql

-- changeset zeus:1
--comment Adding Columns to support de-dupe based on product config
Alter table m_product_loan add column dedupe_enum int(11) after currency_multiplesof;
Alter table m_product_loan add column dedupe_enabled boolean after currency_multiplesof;
INSERT INTO r_enum_value (enum_name, enum_id, enum_message_property, enum_value, enum_type) VALUES ('dedupe_enum', '1', 'PAN', 'PAN', 0);
INSERT INTO r_enum_value (enum_name, enum_id, enum_message_property, enum_value, enum_type) VALUES ('dedupe_enum', '2', 'AADHAAR', 'AADHAAR', 0);
-- changeset zeus:2
--comment Adding Columns to support Bank Account Key for v-pay transaction
Alter table m_product_loan add column disbursement_bank_acc_cv_id int(11) after dedupe_enum;
INSERT INTO m_code (code_name, is_system_defined) VALUES ('DisbursementBankAccountName', true);
INSERT INTO m_code_value ( code_id, code_value, order_position, is_active, is_mandatory)
VALUES ((SELECT id FROM m_code WHERE code_name = 'DisbursementBankAccountName'), 'nocpl', 0, true, false),
((SELECT id FROM m_code WHERE code_name = 'DisbursementBankAccountName'), 'seeds', 1, true, false);
ALTER TABLE m_product_loan ADD CONSTRAINT FK1_m_product_disbursement_bank_acc_cv_id_m_code_value FOREIGN KEY (disbursement_bank_acc_cv_id) REFERENCES m_code_value(id);
-- changeset zeus:3
--comment Updating values for Job chaining.
UPDATE job SET task_priority = '1', cron_expression = '0 1 0 * * ? *',scheduler_group='1' WHERE id=34;
UPDATE job SET task_priority = '2', cron_expression = '0 1 0 * * ? *',scheduler_group='1' WHERE id=2;
UPDATE job SET task_priority = '3', cron_expression = '0 1 0 * * ? *',scheduler_group='1' WHERE id=16;
UPDATE job SET task_priority = '4', cron_expression = '0 1 0 * * ? *',scheduler_group='1' WHERE id=12;
UPDATE job SET task_priority = '5', cron_expression = '0 1 0 * * ? *',scheduler_group='1' WHERE id=32;
UPDATE job SET task_priority = '6', cron_expression = '0 1 0 * * ? *',scheduler_group='1' WHERE id=11;
-- changeset zeus:4
--comment alter script
alter table m_product_loan rename column rounding_mode to emi_rounding_mode;
alter table m_product_loan
modify column emi_rounding_mode varchar(10) after currency_multiplesof,
modify column currency_digits smallint(6) after emi_rounding_mode;
alter table m_product_loan
add column emi_decimal_regex smallint(6) after currency_digits,
add column emi_multiples_of smallint (10) after emi_decimal_regex,
add column interest_rounding_mode varchar(10) after emi_multiples_of,
add column interest_decimal smallint(10) after interest_rounding_mode,
add column interest_decimal_regex smallint(10) after interest_decimal;
INSERT INTO r_enum_value (enum_name, enum_id, enum_message_property, enum_value, enum_type) VALUES ('emi_multiplesof', 1, 'Round Based on Rounding Value', 'Round Based on Rounding Value', 0),
('emi_multiplesof', 10, 'Round the value to next 10', 'Round the value to next 10', 0),('emi_multiples_of', 100, 'Round the value to next 100', 'Round the value to next 100', 0);
-- changeset zeus:5
--comment adding new fields in charge
alter table m_charge add column charge_rounding_mode varchar(20) after charge_payment_mode_enum, add column charge_decimal int(10) after charge_rounding_mode,
add column charge_decimal_regex int(10) after charge_decimal, add column gst_rounding_mode varchar(20) after gst_enum,add column gst_decimal int(10) after gst_rounding_mode,add column gst_decimal_regex int(10) after  gst_decimal,
add column is_gst_slab_enabled bit(1) after gst_decimal_regex,add column gst_slab_limit_apply_for int(10) after is_gst_slab_enabled,add column gst_slab_limit_operator int(10) after gst_slab_limit_apply_for,
add column gst_slab_limit_value decimal(19,6) after gst_slab_limit_operator;
INSERT INTO r_enum_value (enum_name, enum_id, enum_message_property, enum_value, enum_type)
VALUES ('gst_slab_limit_apply_for', 1, 'Loan Amount', 'Loan Amount', 0),('gst_slab_limit_apply_for', 2, 'Charge Percentage', 'Charge Percentage', 0),
('gst_slab_limit_apply_for', 3, 'Charge Amount', 'Charge Amount', 0),('gst_slab_limit_operator', 1, 'Greater Than', 'Greater Than', 0),
('gst_slab_limit_operator', 2, 'Greater Than Equal To', 'Greater Than Equal To', 0),('gst_slab_limit_operator', 3, 'Less Than', 'Less Than', 0),
('gst_slab_limit_operator', 4, 'Less Than Equal To', 'Less Than Equal To', 0),('gst_slab_limit_operator', 5, 'Equal To', 'Equal To', 0);
-- changeset zeus:6
--comment adding new column in LonaTransaction
alter table m_loan_transaction add column value_date date after transaction_date;
-- changeset zeus:7
-- comment demand vs collections report
Insert into `stretchy_report` (`report_name`,`report_type`,`report_subtype`,`report_category`,`report_sql`,`description`,`core_report`,`use_report`,`self_service_user_report`,`jasper_report_template_path`) VALUES ('Demand vs Collections','CSV',NULL,'Loan','SELECT (SELECT code_value FROM m_code_value WHERE id = (SELECT asset_class_cv_id FROM m_product_loan WHERE id = lo.product_id)) as "Product", lo.account_no as "Loan Account No", lo.external_id as "External ID", "" as "Partner Loan ID", lo.vcl_hurdle_rate as "VCL Hurdle Rate", (SELECT principal_share FROM m_product_loan WHERE id = (SELECT product_id FROM m_loan WHERE id = rs.loan_id)) as "Participation Ratio", rs.installment as "Installment Number", date_format(rs.duedate, "%d-%m-%Y") as "Due Date", rs.principal_amount as "Principal", rs.interest_amount as "Interest", "0" as "Overdue Charges", IFNULL(rs.penalty_charges_amount,0) as "Penal Charges", IFNULL(rs.fee_charges_amount,0) as "Foreclosure Charges", "0" as "Prepayment Charges", "0" as "Adhoc Charges", (IFNULL(rs.principal_amount,0) + IFNULL(rs.interest_amount,0) + IFNULL(rs.penalty_charges_amount,0) + IFNULL(rs.fee_charges_amount,0)) as "Amount", rs.self_principal_amount as "Self Principal", rs.self_interest_amount as "Self Interest", "0" as "Self Overdue Charges", IFNULL(rs.self_penalty_charges_amount,0) as "Self Penal Charges", IFNULL(rs.self_fee_charges_amount,0) as "Self Foreclosure Charges", "0" as "Self Prepayment Charges", "0" as "Self Adhoc Charges", (IFNULL(rs.self_principal_amount,0) + IFNULL(rs.self_interest_amount,0) + IFNULL(rs.self_penalty_charges_amount,0) + IFNULL(rs.self_fee_charges_amount,0)) as "Self Amount", (IFNULL(rs.partner_principal_amount,0)) as "Partner Principal", (IFNULL(rs.partner_interest_amount,0)) as "Partner Interest", "0" as "Partner  Overdue Charges", IFNULL(rs.partner_penalty_charges_amount,0) as "Partner Penal Charges", IFNULL(rs.partner_fee_charges_amount,0) as "Partner Foreclosure Charges", "0" as "Partner Prepayment Charges",	"0" as "Partner Adhoc Charges", (IFNULL(rs.partner_principal_amount,0) + IFNULL(rs.partner_interest_amount,0) + IFNULL(rs.partner_penalty_charges_amount,0) + IFNULL(rs.partner_fee_charges_amount,0)) as "Partner Amount", IFNULL(rs.principal_completed_derived,0) as "Principal Received", IFNULL(rs.interest_completed_derived,0) as "Interest Received", "0" as "Overdue Charges Received", IFNULL(rs.penalty_charges_completed_derived,0) as "Penal Charges Received", IFNULL(rs.fee_charges_completed_derived,0) as "Foreclosure Charges Received", "0" as "Prepayment Charges Received", "0" as "Adhoc Charges Received", (IFNULL(rs.principal_completed_derived,0) + IFNULL(rs.interest_completed_derived,0) + IFNULL(rs.penalty_charges_completed_derived,0) + IFNULL(rs.fee_charges_completed_derived,0)) as "Amount Received", IFNULL(rs.self_principal_completed_derived,0) as "Self Principal Received", IFNULL(rs.self_interest_completed_derived,0) as "Self Interest Received", "0" as "Self Overdue Charges Received", IFNULL(rs.self_penalty_charges_completed_derived,0) as "Self Penal Charges Received", IFNULL(rs.self_fee_charges_completed_derived,0) as "Self Foreclosure Charges Received", "0" as "Self Prepayment Charges Received", "0" as "Self Adhoc Charges Received", (IFNULL(rs.self_principal_completed_derived,0) + IFNULL(rs.self_interest_completed_derived,0) + IFNULL(rs.self_penalty_charges_completed_derived,0) + IFNULL(rs.self_fee_charges_completed_derived,0)) as "Self Amount Received", IFNULL(rs.partner_principal_completed_derived,0) as "Partner Principal Received", IFNULL(rs.partner_interest_completed_derived,0) as "Partner Interest Received", "0" as "Partner Overdue Charges Received", IFNULL(rs.partner_penalty_charges_completed_derived,0) as "Partner Penal Charges Received", IFNULL(rs.partner_fee_charges_completed_derived,0) as "Partner Foreclosure Charges Received", "0" as "Partner Prepayment Charges Received", "0" as "Partner Adhoc Charges Received",	(IFNULL(rs.partner_principal_completed_derived,0) + IFNULL(rs.partner_interest_completed_derived,0) + IFNULL(rs.partner_penalty_charges_completed_derived,0) + IFNULL(rs.partner_fee_charges_completed_derived,0)) as "Partner  Amount Received",  (CASE rs.completed_derived WHEN 0 THEN (CASE WHEN ((IFNULL(rs.principal_completed_derived,0) + IFNULL(rs.interest_completed_derived,0) + IFNULL(rs.penalty_charges_completed_derived,0)) = 0) THEN "Not Paid"  WHEN ((IFNULL(rs.principal_completed_derived,0) + IFNULL(rs.interest_completed_derived,0) + IFNULL(rs.penalty_charges_completed_derived,0)) > 0) THEN "Partially Paid" END)  WHEN 1 THEN "Paid"  END) as "Status", (SELECT txn.transaction_date FROM m_loan_transaction txn  WHERE txn.id = (SELECT max(txnrs.loan_transaction_id) FROM m_loan_transaction_repayment_schedule_mapping txnrs  WHERE txnrs.loan_repayment_schedule_id in (SELECT id FROM m_loan_repayment_schedule WHERE installment = rs.installment AND loan_id = rs.loan_id))) as "Date of Collection", 	(CASE rs.completed_derived  WHEN 1 THEN date_format(rs.obligations_met_on_date,"%d-%m-%Y")  END) as "EMI Settlement Date" FROM m_loan lo LEFT JOIN m_partner pr ON pr.id = lo.partner_id LEFT JOIN m_loan_repayment_schedule rs ON rs.loan_id = lo.id WHERE pr.id = ${partnerId} AND lo.loan_status_id NOT IN (100,200,500) AND rs.duedate BETWEEN STR_TO_DATE("${startDate}", "%d %M %Y") AND STR_TO_DATE("${endDate}", "%d %M %Y") GROUP BY rs.id ORDER BY lo.id, rs.installment',NULL,b'0',b'1',b'0',NULL);
Insert into stretchy_report_parameter(report_id,parameter_id) select distinct r.id, p.id from stretchy_report r join stretchy_parameter p on r.report_name='Demand vs Collections' and p.id in (1);
Insert into stretchy_report_parameter(report_id,parameter_id) select distinct r.id, p.id from stretchy_report r join stretchy_parameter p on r.report_name='Demand vs Collections' and p.id in (2);
Insert into stretchy_report_parameter(report_id,parameter_id) select distinct r.id, p.id from stretchy_report r join stretchy_parameter p on r.report_name='Demand vs Collections' and p.id in (1023);
-- changeset zeus:8
-- comment servicer fee report
Insert into `stretchy_report` (`report_name`,`report_type`,`report_subtype`,`report_category`,`report_sql`,`description`,`core_report`,`use_report`,`self_service_user_report`,`jasper_report_template_path`) VALUES ('Servicer Fee','CSV',NULL,'Loan','SELECT * FROM ((select (SELECT code_value FROM m_code_value WHERE id = (SELECT asset_class_cv_id FROM m_product_loan WHERE id = lo.product_id)) as Product, pr.partner_name as "Partner Name", lo.account_no as "Loan Account No", (SELECT self_principal_share FROM m_product_loan WHERE id = (SELECT id FROM m_product_loan WHERE id = lo.product_id)) as "Lender Participation Ratio", lo.annual_nominal_interest_rate as "Customer Interest Rate", lo.vcl_hurdle_rate as "Self Interest Rate", "" as "Installment", lo.disbursedon_date as "Due Date", lo.disbursedon_date as "Paid Date", lo.disbursedon_date as "Partner Transfer Date", "0" as "Principal", "0" as "Interest", lc.amount as "Pre Disbursement Charges", "0" as "Adhoc Charges", "0" as "Over Due Charge", "0" as "Penalty Charges", "0" as "Bounce Charges", "0" as "Foreclosure Charges", "0" as "Prepayment Charges", "0" as "Servicer Fee Interest", "0" as "Servicer Fee Interest Gross down for GST Loss", lc.sf_partner_base_amount as "Servicer Pre-Disbursement Charges", lc.sf_charge_gst_loss_amount as "Servicer Pre-Disbursement Charges Gross Down for GST loss", "0" as "Servicer BPI Share", "0" as "Servicer Penalty Share", "0" as "Servicer Bounce Share", "0" as "Servicer Prepayment Charges", "0" as "Servicer Foreclosure Charges", "0" as "Servicer Foreclosure Charges gross down for gst loss", "0" as "Servicer Overdue Share", lc.sf_charge_gst_amount as "GST", lc.sf_charge_invoice_amount as "Servicer Fee Payable" from m_loan lo left join m_partner pr on pr.id = lo.partner_id left join m_loan_charge lc on lc.loan_id = lo.id where pr.id = ${partnerId} and lo.loan_status_id not in (100,200,500) and lc.servicer_fee_enabled = 1 and lc.charge_time_enum  in(1) and date_format(lo.disbursedon_date ,"%Y-%m-%d") BETWEEN STR_TO_DATE("${startDate}" , "%d %M %Y") AND STR_TO_DATE("${endDate}" , "%d %M %Y")) union all (select  (SELECT code_value FROM m_code_value WHERE id = (SELECT asset_class_cv_id FROM m_product_loan WHERE id = lo.product_id)) as Product, pr.partner_name as "Partner Name", lo.account_no as "Loan Account No", (SELECT self_principal_share FROM m_product_loan WHERE id = (SELECT id FROM m_product_loan WHERE id = lo.product_id)) as "Lender Participation Ratio", lo.annual_nominal_interest_rate as "Customer Interest Rate", lo.vcl_hurdle_rate as "Self Interest Rate", lc.installment as "Installment", txn.transaction_date as "Due Date", txn.transaction_date as "Paid Date", txn.partner_transfer_date as "Partner Transfer Date", "0" as "Principal", "0" as "Interest", "0" as "Pre Disbursement Charges", "0" as "Adhoc Charges", "0" as "Over Due Charge", "0" as "Penalty Charges", "0" as "Bounce Charges", lc.amount as "Foreclosure Charges", "0" as "Prepayment Charges", "0" as "Servicer Fee Interest", "0" as "Servicer Fee Interest Gross down for GST Loss", "0" as "Servicer Pre-Disbursement Charges", "0" as "Servicer Pre-Disbursement Charges Gross Down for GST loss", "0" as "Servicer BPI Share", "0" as "Servicer Penalty Share", "0" as "Servicer Bounce Share", "0" as "Servicer Prepayment Charges", lc.sf_partner_base_amount as "Servicer Foreclosure Charges", lc.sf_charge_gst_loss_amount as "Servicer Foreclosure Charges gross down for gst loss", "0" as "Servicer Overdue Share", lc.sf_charge_gst_amount as "GST", lc.sf_charge_invoice_amount as "Servicer Fee Payable" from m_loan lo left join m_partner pr on pr.id = lo.partner_id left join m_loan_charge lc on lc.loan_id = lo.id left join m_loan_transaction txn on txn.loan_id = lo.id where pr.id = ${partnerId} and txn.transaction_type_enum in (11) and lo.loan_status_id not in (100,200,500) and lc.servicer_fee_enabled = 1 and lc.charge_time_enum in (17) and date_format(txn.partner_transfer_date ,"%Y-%m-%d") BETWEEN STR_TO_DATE("${startDate}" , "%d %M %Y") AND STR_TO_DATE("${endDate}" , "%d %M %Y")) union all (select  cv.code_value as Product, pr.partner_name as "Partner Name", lo.account_no as "Loan Account No", lp.self_principal_share as "Lender Participation Ratio", lo.annual_nominal_interest_rate as "Customer Interest Rate", lo.vcl_hurdle_rate as "Self Interest Rate", rs.installment as "Installment", rs.duedate as "Due Date", txn.transaction_date as "Paid Date", txn.partner_transfer_date as "Partner Transfer Date", coalesce(txnrs.principal_portion_derived,0) as "Principal", coalesce(txnrs.interest_portion_derived,0) as "Appropriated Interest Amount", "0" as "Pre Disbursement Charges", "0" as "Adhoc Charges", "0" as "Over Due Charge", "0" as "Penalty Charges", "0" as "Bounce Charges", "0" as "Foreclosure Charges", "0" as "Prepayment Charges", sfcal.sf_interest_base_amount as "Servicer Fee Interest", sfcal.sf_interest_gst_loss_amount as "Servicer Fee Interest Gross down for GST loss", "0" as "Servicer Pre-Disbursement Charges", "0" as "Servicer Pre-Disbursement Charges gross down for GST loss", "0" as "Servicer BPI Share", "0" as "Servicer Penalty Share", "0" as "Servicer Bounce Share", "0" as "Servicer Prepayment Charges", "0" as "Servicer Foreclosure Charges", "0" as "Servicer Foreclosure Charges gross down for gst loss", "0" as "Servicer Overdue Share", sfcal.sf_interest_gst_amount as "GST", sfcal.sf_interest_invoice_amount as "Servicer Fee Payable" from m_loan lo left join m_partner pr on pr.id = lo.partner_id left join m_product_loan lp on lp.id = lo.product_id left join m_loan_transaction txn on txn.loan_id = lo.id left join m_loan_transaction_repayment_schedule_mapping txnrs on txnrs.loan_transaction_id = txn.id left join m_servicer_fee_calculation sfcal on sfcal.loan_transaction_rs_mapping_id = txnrs.id left join m_loan_repayment_schedule rs on rs.id = txnrs.loan_repayment_schedule_id left join r_enum_value en on en.enum_name = "loan_status_id" and en.enum_id = lo.loan_status_id left join m_code_value cv on cv.id = lp.asset_class_cv_id where pr.id = ${partnerId} and txn.transaction_type_enum not in (1,5) and lo.loan_status_id not in (100,200,500) and txn.event not in ( "ADVANCE") and txn.interest_portion_derived>0 and lp.servicer_fee_interest_config_enabled = 1 and date_format(txn.partner_transfer_date ,"%Y-%m-%d") BETWEEN STR_TO_DATE("${startDate}" , "%d %M %Y") AND STR_TO_DATE("${endDate}" , "%d %M %Y"))) AS sf order by sf.Installment',NULL,b'0',b'1',b'0',NULL);
Insert into stretchy_report_parameter(report_id,parameter_id) select distinct r.id, p.id from stretchy_report r join stretchy_parameter p on r.report_name='Servicer Fee' and p.id in (1);
Insert into stretchy_report_parameter(report_id,parameter_id) select distinct r.id, p.id from stretchy_report r join stretchy_parameter p on r.report_name='Servicer Fee' and p.id in (2);
Insert into stretchy_report_parameter(report_id,parameter_id) select distinct r.id, p.id from stretchy_report r join stretchy_parameter p on r.report_name='Servicer Fee' and p.id in (1023);
-- changeset zeus:9
-- comment Added DPD Bucket and DPD History Bucket to LoanRepaymentSchedule and LoanRepaymentScheduleHistory
ALTER table m_loan_repayment_schedule add column dpd_bucket varchar(20) after dpd;
ALTER table m_loan_repayment_schedule add column dpd_bucket_history varchar(20) after dpd_history;
ALTER table m_loan_repayment_schedule_history add column dpd_bucket varchar(20) after dpd;
ALTER table m_loan_repayment_schedule_history add column dpd_bucket_history varchar(20) after dpd_history;
-- changeset zeus:10
-- comment collection Appropriation Report updated
UPDATE `zeus_colending`.`stretchy_report` SET `report_sql` = 'select lo.partner_id as \"Partner ID\",\n lo.id as \"loan_id\",\n  pr.partner_name as \"Partner Name\",\n  cl.display_name as \"End Borrower Name\",\n  lo.external_id as \"External ID\",\n  lo.account_no as \"Loan Account No\", \n  rs.installment as \"Installemt Number\",\n  txn.transaction_date as \"Paid Date\",\n  txnrs.interest_portion_derived as \"Interest Paid\",\n txnrs.principal_portion_derived as \"Principal Paid\",\n txnrs.advance_amount as \"Advance Amount\",\n if(rs.obligations_met_on_date between STR_TO_DATE(\"${startDate}\", \"%d %M %Y\") and STR_TO_DATE(\"${endDate}\", \"%d %M %Y\"), \"PAID\",\"PARTIALLY PAID\") as \"status\"\n  from  m_loan_transaction_repayment_schedule_mapping txnrs\n  left join m_loan_transaction txn on txn.id = txnrs.loan_transaction_id\n  left join m_loan_repayment_schedule rs on rs.id= txnrs.loan_repayment_schedule_id\n  left join m_loan lo on  lo.id  = txn.loan_id \n   left join m_client cl on cl.id = lo.client_id\n  left join m_partner pr on pr.id = lo.partner_id\n  where  pr.id = ${partnerId} and\n  txnrs.loan_transaction_id in (select id from m_loan_transaction txn where  txn.transaction_date  between STR_TO_DATE(\"${startDate}\", \"%d %M %Y\") and STR_TO_DATE(\"${endDate}\", \"%d %M %Y\"))\n  group by txnrs.id\n  order by txn.transaction_date,txn.loan_id,rs.installment' WHERE (`id` = '204');
-- changeset zeus:11
-- comment scheduler alert configuration
update c_external_service_properties set value='info@vivriticapital.com' where name='fromEmail';
insert into c_external_service_properties values('toEmail','Zeus.Development@vivriticapital.com',2);
-- changeset zeus:12
-- comment collection Report Updated
UPDATE `zeus_colending`.`stretchy_report` SET `report_sql` = ' select lo.partner_id as \"Partner ID\",\n  pr.partner_name as \"Partner Name\",\n  cl.display_name as \"End Borrower Name\",\n  lo.external_id as \"External ID\",\n  lo.account_no as \"Loan Account No\", \n  txn.amount as \"Paid Amount\",\n  txn.transaction_date as \"Paid Date\",\n  txn.partner_transfer_utr as \"Partner Transfer UTR\",\n  txn.partner_transfer_date as \"Partner Transfer Date\",\n  txn.receipt_reference_number as \"Receipt Reference Number\",\n  cv.code_value as \"Repayment Mode\"\n  from m_loan_transaction txn\n  left join m_loan lo on  lo.id  = txn.loan_id \n  left join m_client cl on cl.id = lo.client_id\n  left join m_partner pr on pr.id = lo.partner_id\n  left join m_code_value cv on cv.id = txn.repayment_mode_cv_id\n  where pr.id = ${partnerId} and\n  txn.transaction_type_enum not in (1) and \n  txn.transaction_date between STR_TO_DATE(\"${startDate}\", \"%d %M %Y\") and STR_TO_DATE(\"${endDate}\", \"%d %M %Y\")   and \n  txn.transaction_type_enum in (2,6,11,25) and txn.createdon_userid not in (2) and txn.amount>0 and\n  txn.is_reversed = 0 \n  group by txn.id\n  order by txn.transaction_date,lo.account_no' WHERE (`id` = '203');
-- changeset zeus:13
-- comment pos Report Updated
UPDATE `zeus_colending`.`stretchy_report` SET `report_sql` = 'select cl.account_no as  \"CIFID \",\n cl.display_name as \"customer_name\",\n cvp.code_value as \"Product\",\n lh.account_no as \"loan_number\",\n date_format(lh.disbursedon_date,\"%d-%m-%Y\") as \"DISBURSAL_DATE\",\n date_format(lo.expected_maturedon_date,\"%d-%m-%Y\") as \"Maturity Date\",\n lo.number_of_repayments as \"Original tenure\",\n (CASE \n	when lo.loan_status_id = 710 \n		THEN IF(date_format(lo.closedon_date,\"%Y-%m-%d\") <= STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\"),  0, \n		((SELECT count(*) FROM m_loan_repayment_schedule_history WHERE loan_id = lo.id AND (duedate = STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL)) +\n		(SELECT count(*) FROM m_loan_repayment_schedule_history WHERE loan_id = lo.id AND (duedate < STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL)) +\n		(SELECT count(*) FROM m_loan_repayment_schedule_history WHERE loan_id = lo.id AND (duedate > STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") \n			OR (obligations_met_on_date < STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL) \n			OR (obligations_met_on_date > STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\"))))) )\n	when lo.loan_status_id = 300 \n		THEN ((SELECT count(*) FROM m_loan_repayment_schedule WHERE loan_id = lo.id AND (duedate = STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL)) +\n			  (SELECT count(*) FROM m_loan_repayment_schedule WHERE loan_id = lo.id AND (duedate < STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL)) +\n	          (SELECT count(*) FROM m_loan_repayment_schedule WHERE loan_id = lo.id AND (duedate > STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") \n OR (obligations_met_on_date < STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL) \n				OR (obligations_met_on_date > STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\")))))\n	when lo.loan_status_id = 600 THEN IF(date_format(lo.closedon_date,\"%Y-%m-%d\") <= STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\"),  0, \n		((SELECT count(*) FROM m_loan_repayment_schedule WHERE loan_id = lo.id AND (duedate = STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL)) +\n		(SELECT count(*) FROM m_loan_repayment_schedule WHERE loan_id = lo.id AND (duedate < STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL)) +\n		(SELECT count(*) FROM m_loan_repayment_schedule WHERE loan_id = lo.id AND (duedate > STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") \n			OR (obligations_met_on_date < STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\") AND obligations_met_on_date IS NULL) \n			OR (obligations_met_on_date > STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\"))))))\n END) as \"Remaining Tenure\",\n lo.nominal_interest_rate_per_period as \"Rate of Interest\",\n lh.approved_principal as \"Loanamount\",\n lh.principal_outstanding_derived as \"TOTAL_PRINCIPAL_OUTSTANDING\",\n lh.interest_outstanding_derived as \"TOTAL_INTEREST_OUTSTANDING\",\n lh.principal_overdue_derived as \"TOTAL_PRINCIPAL_OD\",\n lh.interest_overdue_derived as \"TOTAL_INTEREST_OD\",\n reterive_emi_amount(lo.id, STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\"), lo.closedon_date, lo.maturedon_date,lo.loan_status_id) as \"EMI_AMOUNT\",\n get_dpd(lo.id, STR_TO_DATE(\"${asOn}\", \"%d %M %Y\"),lh.loan_status_id,lh.closedon_date,\'POS\') as \"AGEING\",\n date_format(lh.closedon_date,\"%d-%m-%Y\") as \"CLOSED DATE\",\n en.enum_message_property as  \"LOAN_STATUS\",\n (SELECT date_format(transaction_date,\"%d-%m-%Y\") as transaction_date FROM m_loan_transaction \n	WHERE loan_id = lo.id \n	AND date_format(transaction_date,\"%Y-%m-%d\") <= STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\")\n    AND transaction_type_enum NOT IN (1,5)\n    AND createdon_userid <> 2 and amount <> 0 AND is_reversed <> 1 \n	ORDER BY createdon_date desc, id desc limit 1) as \"LAST_PAID_DATE\",\n  (SELECT amount FROM m_loan_transaction \n	WHERE loan_id = lo.id\n		AND date_format(transaction_date,\"%Y-%m-%d\") <= STR_TO_DATE(\"${asOn}\" , \"%d %M %Y\")\n		AND transaction_type_enum NOT IN (1,5) AND event NOT IN(\"UNPROCESSEDADVANCE\")\n        AND createdon_userid <> 2 and amount <> 0 AND is_reversed <> 1 \n	ORDER BY createdon_date desc, id desc limit 1) as \"LAST_PAID_AMT\"\n from m_loan_history lh \n left join m_client cl on cl.id = lh.client_id \n left join m_product_loan lp on lp.id = lh.product_id \n left join m_loan lo on lo.id = lh.loan_id \n left join m_partner pr on pr.id = lh.partner_id \n left join m_loan_transaction lt on lt.loan_id = lh.loan_id \n left join m_code_value cvp on cvp.id = lp.asset_class_cv_id\n left join m_code_value cvr on cvr.id = lt.repayment_mode_cv_id \n left join m_partner p on p.id = lh.partner_id\n left join r_enum_value en on en.enum_name = \"loan_status_id\" and en.enum_id = lh.loan_status_id\n where lh.partner_id = ${partnerId}\n  and lh.id IN (SELECT id FROM m_loan_history lhs WHERE (loan_id, rev) \n	in (SELECT loan_id, max(rev) as rev FROM m_loan_history \n		WHERE date_format(value_date,\"%Y-%m-%d\") <= STR_TO_DATE(\"${asOn}\", \"%d %M %Y\") GROUP BY loan_id) order by lhs.loan_id)\n and lh.loan_status_id NOT IN(100,200,500)\n group by lh.loan_id\n order by lh.loan_id' WHERE (`id` = '194');
-- changeset zeus:14
-- comment adding code Values in m_code_value
INSERT INTO zeus_colending.m_code_value (code_id, code_value, order_position, is_active, is_mandatory) VALUES (51, 'Unsecured MSME', 29, 1, 0);
INSERT INTO zeus_colending.m_code_value (code_id, code_value, order_position, is_active, is_mandatory) VALUES (53, 'Insurance Life Cover', 15, 1, 0);
INSERT INTO zeus_colending.m_code_value (code_id, code_value, order_position, is_active, is_mandatory) VALUES (53, 'Insurance Hospicash', 16, 1, 0);
-- changeset zeus:15
-- comment Disbursement Report Updated
UPDATE `zeus_colending`.`stretchy_report` SET `report_sql` = 'select lo.partner_id as "Partner ID", pr.partner_name as "Partner Name", cl.display_name as "End Borrower Name", lo.external_id as "External Id", lo.account_no as "Loan Account No", lo.principal_disbursed_derived as "Loan Amount", lo.annual_nominal_interest_rate as "Interest Rate", lo.term_frequency as "Tenure (in months)", lo.total_charges_due_at_disbursement_derived as "Total Charges Deducted", lo.total_gst_due_at_disbursement_derived as "Total GST Deducted", lo.net_disbursal_amount as "Net Disbursal Amount", lo.total_outstanding_derived as "Total Outstanding Amount", lxhd.xirr_value as "XIRR Value", sf.vcl_hurdle_rate as "VCL Hurdle Rate", date_format(rs.duedate, "%d-%m-%Y") as "First Repayment Date", date_format(lo.expected_maturedon_date, "%d-%m-%Y") as "Maturity Date", vp.payment_type as "Transaction Type", vp.action as "Penny Drop Status", vp.utr as "UTR No", sum(coalesce(case lc.fees_charge_type_cv_id when  (select id from m_code_value where code_value="Processing Fees" and code_id in (select id from m_code where code_name = "FeesChargeType")) then lc.amount + lc.total_gst end,0)) as "Processing Fee Amount", sum(coalesce(case lc.fees_charge_type_cv_id when (select id from m_code_value where code_value="Insurance Charges" and code_id in (select id from m_code where code_name = "FeesChargeType"))  then  lc.amount + lc.total_gst end,0)) as "Insurance Charge Amount", sum(coalesce(case lc.fees_charge_type_cv_id when (select id from m_code_value where code_value="Insurance Life Cover" and code_id in (select id from m_code where code_name = "FeesChargeType")) then lc.amount + lc.total_gst end,0)) as "Insurance Life Cover", sum(coalesce(case lc.fees_charge_type_cv_id when (select id from m_code_value where code_value="Insurance Hospicash" and code_id in (select id from m_code where code_name = "FeesChargeType")) then lc.amount + lc.total_gst end,0)) as "Insurance Hospicash", sum(coalesce(case lc.fees_charge_type_cv_id when (select id from m_code_value where code_value="Stamp Duty" and code_id in (select id from m_code where code_name = "FeesChargeType"))  then  lc.amount + lc.total_gst end,0)) as "Stamp Duty Amount", date_format(lo.disbursedon_date, "%d-%m-%Y") as "Disbursement Date", en.enum_message_property as "Status" from m_loan lo left join m_client cl on cl.id = lo.client_id left join m_partner pr on pr.id = lo.partner_id left join m_product_loan lp on lp.id = lo.product_id left join m_loan_xirr_history_details lxhd on lxhd.loan_id = lo.id left join m_loan_repayment_schedule rs on rs.loan_id = lo.id and rs.installment = 1 left join m_loan_charge lc on lo.id = lc.loan_id and lc.fees_charge_type_cv_id = lc.fees_charge_type_cv_id left join r_enum_value en on en.enum_name = "loan_status_id" and en.enum_id = lo.loan_status_id left join m_vpay_transaction_details vp on vp.event_type="DISBURSEMENT" and vp.loan_id = lo.id left join m_servicer_fee_config sf on sf.product_id = lp.id where pr.id = ${partnerId} and lo.loan_status_id not in (100,200,500) and lxhd.loan_event in (1) and lo.disbursedon_date between STR_TO_DATE("${startDate}", "%d %M %Y") and STR_TO_DATE("${endDate}", "%d %M %Y") group by lo.id order by lo.id' WHERE (`id` = '195');
-- changeset zeus:16
-- comment Adding permissions for reports
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_Multiple RS Report','Multiple RS Report','READ',0);
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_Principal Outstanding Report','Principal Outstanding Report','READ',0);
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_Disbursement Report','Disbursement Report','READ',0);
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_GST Report','GST Report','READ',0);
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_Demand Report','Demand Report','READ',0);
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_Collection Inflow Report','Collection Inflow Report','READ',0);
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_Collection Appropriation Report','Collection Appropriation Report','READ',0);
Insert into m_permission (grouping,code,entity_name,action_name,can_maker_checker) values('report','READ_Servicer Fee','Servicer Fee','READ',0);
-- changeset zeus:17
-- comment Increased the voter_id column length to 20
ALTER TABLE m_client MODIFY voter_id varchar(20);
