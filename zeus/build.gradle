buildscript {
    ext {
        jacocoVersion = '0.8.7'
        retrofitVersion = '2.9.0'
        okhttpVersion = '4.9.3'
        oltuVersion = '1.0.1'
        lmsJavaProjects = subprojects.findAll{
            [
                'fineract-api',
                'core-provider',
                'integration-tests',
                'twofactor-tests',
                'oauth2-tests',
                'fineract-client',
                'core',
                'service',
                'starter'
            ].contains(it.name)
        }
    }
    repositories {
       // maven { url 'https://plugins.gradle.org/m2/' }
        maven {
            name = "VCPL-Jfrog"
            url "${vcpl_repo_url}"// The Artifactory (preferably virtual) repository to resolve from
            credentials {               // Optional resolver credentials (leave out to use anonymous resolution)
                username = "${artifactory_user}"// Artifactory user name
                password = "${artifactory_password}" // Password or API Key
            }
        }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.9.0'
        classpath 'org.eclipse.persistence:eclipselink:4.0.0'
        classpath 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
        classpath 'com.google.cloud.tools:jib-layer-filter-extension-gradle:0.3.0'
        classpath 'io.swagger.core.v3:swagger-jaxrs2-jakarta:2.2.10'
        classpath 'jakarta.servlet:jakarta.servlet-api:5.0.0'
        classpath 'org.apache.commons:commons-lang3:3.14.0'
    }
}

plugins {
    id "org.barfuin.gradle.taskinfo" version "1.4.0"
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'com.github.jk1.dependency-license-report' version '2.1' apply false
    id 'org.openapi.generator' version '6.6.0' apply false
    id 'org.zeroturnaround.gradle.jrebel' version '1.1.11' apply false
    id 'org.springframework.boot' version '3.2.4' apply false
    id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.2.21' apply false
    id 'com.gorylenko.gradle-git-properties' version '2.4.1' apply false
    id 'org.asciidoctor.jvm.convert' version '3.3.2' apply false
    id 'org.asciidoctor.jvm.pdf' version '3.3.2' apply false
    id 'org.asciidoctor.jvm.epub' version '3.3.2' apply false
    id 'org.asciidoctor.jvm.revealjs' version '3.3.2' apply false
    id 'org.asciidoctor.jvm.gems' version '3.3.2' apply false
    id 'org.asciidoctor.kindlegen.base' version '3.2.0' apply false
    id 'com.google.cloud.tools.jib' version '3.2.1' apply false
    id 'fr.brouillard.oss.gradle.jgitver' version '0.10.0-rc03'
    id 'org.sonarqube' version '3.3'
    id 'com.github.andygoossens.modernizer' version '1.6.2' apply false
    id "com.jfrog.artifactory" version "4.16.1"
    id "org.owasp.dependencycheck" version "8.2.1"
}

//apply from: "${rootDir}/buildSrc/src/main/groovy/org.vcpl.lms.release.gradle"

description = '''\
Run as:
gradle clean bootRun'''

ext['groovy.version'] = '4.0.0'
ext['swaggerFile'] = "$rootDir/core-provider/build/classes/java/main/static/lms.json".toString()


allprojects  {
    group = 'org.vcpl.lms'
    version = '1.0-SNAPSHOT'
    repositories {
       // mavenCentral()
        maven {
            name = "VCPL-Jfrog"
            url "${vcpl_repo_url}"// The Artifactory (preferably virtual) repository to resolve from
            credentials {               // Optional resolver credentials (leave out to use anonymous resolution)
                username = "${artifactory_user}"// Artifactory user name
                password = "${artifactory_password}" // Password or API Key
            }
        }
    }

    apply plugin: 'java'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'project-report'
    apply plugin: 'com.github.jk1.dependency-license-report'
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.artifactory"
    apply from: "$rootDir/artifactory.gradle"
    apply plugin: 'org.owasp.dependencycheck'
}

configure(project.lmsJavaProjects) {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply from: "${rootDir}/buildSrc/src/main/groovy/org.vcpl.lms.dependencies.gradle"
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.artifactory"
    apply from: "$rootDir/artifactory.gradle"

    group = 'org.vcpl.lms'

    /* define the valid syntax level for source files */
    sourceCompatibility = JavaVersion.VERSION_18
    /* define binary compatibility version */
    targetCompatibility = JavaVersion.VERSION_18

    /* http://stackoverflow.com/questions/19653311/jpa-repository-works-in-idea-and-production-but-not-in-gradle */
    sourceSets.main.output.resourcesDir = sourceSets.main.java.classesDirectory
    sourceSets.test.output.resourcesDir = sourceSets.test.java.classesDirectory

    configurations {
        implementation.setCanBeResolved(true)
        api.setCanBeResolved(true)
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += [
            "-Xlint:unchecked",
            "-Xlint:cast",
            "-Xlint:auxiliaryclass",
            "-Xlint:deprecation",
            "-Xlint:dep-ann",
            "-Xlint:divzero",
            "-Xlint:empty",
            "-Xlint:exports",
            "-Xlint:fallthrough",
            "-Xlint:finally",
            "-Xlint:module",
            "-Xlint:opens",
            "-Xlint:options",
            "-Xlint:overloads",
            "-Xlint:overrides",
            "-Xlint:path",
            "-Xlint:processing",
            "-Xlint:removal",
            "-Xlint:requires-automatic",
            "-Xlint:requires-transitive-automatic",
            "-Xlint:try",
            "-Xlint:varargs",
            "-Xlint:preview",
            "-Xlint:static",
            // -Werror needs to be disabled because EclipseLink's static weaving doesn't generate warning-free code
            // and during an IntelliJ recompilation, it fails
            //"-Werror",
            "-Xmaxwarns",
            1500,
            "-Xmaxerrs",
            1500
        ]
        // TODO FINERACT-959 (gradually) enable -Xlint:all (see "javac -help -X")
        options.deprecation = true
    }

    // If we are running Gradle within Eclipse to enhance classes,
    // set the classes directory to point to Eclipse's default build directory
    if (project.hasProperty('env') && project.getProperty('env') == 'eclipse') {
        sourceSets.main.java.outputDir = file("$projectDir/bin/main")
    }

    dependencies {
        implementation (
                'ch.qos.logback:logback-core',
                'org.slf4j:slf4j-api',
                'org.slf4j:log4j-over-slf4j',
                'org.slf4j:jul-to-slf4j',
                )
        implementation group: 'org.vcpl.vpay.client', name: 'client', version: '1.0-20240314.093241-24'
        implementation ("ch.qos.logback:logback-classic") {
            exclude(module: "slf4j-api")
            exclude(module: "dom4j")
        }

        testImplementation( 'org.mockito:mockito-core',
                'org.mockito:mockito-junit-jupiter',
                'org.junit.jupiter:junit-jupiter-api',
                'org.junit.jupiter:junit-jupiter-engine',
                'org.junit.platform:junit-platform-runner', // required to be able to run tests directly under Eclipse, see FINERACT-943 & FINERACT-1021
                'org.bouncycastle:bcpkix-jdk15to18',
                'org.bouncycastle:bcprov-jdk15to18',
                'org.awaitility:awaitility',
                'com.google.truth:truth',
                'com.google.truth.extensions:truth-java8-extension',
                'io.cucumber:cucumber-core',
                'io.cucumber:cucumber-java',
                'io.cucumber:cucumber-java8',
                'io.cucumber:cucumber-junit-platform-engine',
                )
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.vcpl.lms'
            version = project.version
           // artifactId = 'zeus'
            //from components.java
            artifact  file("$rootDir/core-provider/build/libs/zeus-"+project.version+".jar")
        }
    }
    repositories {
        maven {
            name = "VCPL-Jfrog"
            url "${vcpl_repo_url}"// The Artifactory (preferably virtual) repository to resolve from
            credentials {               // Optional resolver credentials (leave out to use anonymous resolution)
                username = "${artifactory_user}"// Artifactory user name
                password = "${artifactory_password}" // Password or API Key
            }
        }
    }
}

task printSourceSetInformation() {
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}
